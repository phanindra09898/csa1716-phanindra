def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i] == j:
            return False

    for i, j in zip(range(row, -1, -1), range(col, 8)):
        if board[i] == j:
            return False

    return True

def solve_queens(board, row):
    if row >= 8:
        return True

    for col in range(8):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            board[row] = -1

    return False

def print_solution(board):
    for i in range(8):
        row = ['Q' if board[i] == j else '.' for j in range(8)]
        print(' '.join(row))

def solve_8_queens():
    board = [-1] * 8
    if solve_queens(board, 0):
        print("Solution:")
        print_solution(board)
    else:
        print("No solution exists")

if __name__ == "__main__":
    solve_8_queens()
