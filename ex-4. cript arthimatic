from itertools import permutations

def solve_cryptarithmetic(puzzle):
    # Extract unique characters from the puzzle
    chars = set()
    for word in puzzle:
        for char in word:
            chars.add(char)
    
    # Solve the puzzle by trying all possible combinations of values for characters
    for values in generate_possible_values(chars):
        if is_solution(puzzle, values):
            return values
    
    # If no solution found
    return None


def generate_possible_values(chars):
    # Generate all possible combinations of values for characters
    num_values = len(chars)
    for values in permutations(range(10), num_values):
        yield dict(zip(chars, values))


def is_solution(puzzle, values):
    # Evaluate the puzzle with the given values
    num_puzzle = []
    for word in puzzle:
        num_word = ''.join(str(values[char]) for char in word)
        num_puzzle.append(int(num_word))
    
    # Check if the puzzle is solved
    return sum(num_puzzle[:-1]) == num_puzzle[-1]


# Example usage:
puzzle = ["SEND", "MORE", "MONEY"]
solution = solve_cryptarithmetic(puzzle)

if solution:
    print("Solution found:")
    print(solution)
else:
    print("No solution found.")
